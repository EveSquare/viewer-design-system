// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file RCRSLogProto.proto (syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChangeSetProto, ConfigProto, EntityProto, MessageProto } from "./RCRSProto_pb";

/**
 * @generated from message LogProto
 */
export class LogProto extends Message<LogProto> {
  /**
   * @generated from oneof LogProto.log
   */
  log: {
    /**
     * @generated from field: StartLogProto start = 1;
     */
    value: StartLogProto;
    case: "start";
  } | {
    /**
     * @generated from field: InitialConditionsLogProto initialCondition = 2;
     */
    value: InitialConditionsLogProto;
    case: "initialCondition";
  } | {
    /**
     * @generated from field: CommandLogProto command = 3;
     */
    value: CommandLogProto;
    case: "command";
  } | {
    /**
     * @generated from field: PerceptionLogProto perception = 4;
     */
    value: PerceptionLogProto;
    case: "perception";
  } | {
    /**
     * @generated from field: ConfigLogProto config = 5;
     */
    value: ConfigLogProto;
    case: "config";
  } | {
    /**
     * @generated from field: UpdatesLogProto update = 6;
     */
    value: UpdatesLogProto;
    case: "update";
  } | {
    /**
     * @generated from field: EndLogProto end = 7;
     */
    value: EndLogProto;
    case: "end";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "LogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: StartLogProto, oneof: "log" },
    { no: 2, name: "initialCondition", kind: "message", T: InitialConditionsLogProto, oneof: "log" },
    { no: 3, name: "command", kind: "message", T: CommandLogProto, oneof: "log" },
    { no: 4, name: "perception", kind: "message", T: PerceptionLogProto, oneof: "log" },
    { no: 5, name: "config", kind: "message", T: ConfigLogProto, oneof: "log" },
    { no: 6, name: "update", kind: "message", T: UpdatesLogProto, oneof: "log" },
    { no: 7, name: "end", kind: "message", T: EndLogProto, oneof: "log" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogProto {
    return new LogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogProto {
    return new LogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogProto {
    return new LogProto().fromJsonString(jsonString, options);
  }

  static equals(a: LogProto | PlainMessage<LogProto> | undefined, b: LogProto | PlainMessage<LogProto> | undefined): boolean {
    return proto3.util.equals(LogProto, a, b);
  }
}

/**
 * @generated from message StartLogProto
 */
export class StartLogProto extends Message<StartLogProto> {
  constructor(data?: PartialMessage<StartLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "StartLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartLogProto {
    return new StartLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartLogProto {
    return new StartLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartLogProto {
    return new StartLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: StartLogProto | PlainMessage<StartLogProto> | undefined, b: StartLogProto | PlainMessage<StartLogProto> | undefined): boolean {
    return proto3.util.equals(StartLogProto, a, b);
  }
}

/**
 * @generated from message InitialConditionsLogProto
 */
export class InitialConditionsLogProto extends Message<InitialConditionsLogProto> {
  /**
   * @generated from field: repeated EntityProto entities = 1;
   */
  entities: EntityProto[] = [];

  constructor(data?: PartialMessage<InitialConditionsLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "InitialConditionsLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entities", kind: "message", T: EntityProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitialConditionsLogProto {
    return new InitialConditionsLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitialConditionsLogProto {
    return new InitialConditionsLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitialConditionsLogProto {
    return new InitialConditionsLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: InitialConditionsLogProto | PlainMessage<InitialConditionsLogProto> | undefined, b: InitialConditionsLogProto | PlainMessage<InitialConditionsLogProto> | undefined): boolean {
    return proto3.util.equals(InitialConditionsLogProto, a, b);
  }
}

/**
 * @generated from message CommandLogProto
 */
export class CommandLogProto extends Message<CommandLogProto> {
  /**
   * @generated from field: int32 time = 1;
   */
  time = 0;

  /**
   * @generated from field: repeated MessageProto commands = 2;
   */
  commands: MessageProto[] = [];

  constructor(data?: PartialMessage<CommandLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "CommandLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "commands", kind: "message", T: MessageProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandLogProto {
    return new CommandLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandLogProto {
    return new CommandLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandLogProto {
    return new CommandLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: CommandLogProto | PlainMessage<CommandLogProto> | undefined, b: CommandLogProto | PlainMessage<CommandLogProto> | undefined): boolean {
    return proto3.util.equals(CommandLogProto, a, b);
  }
}

/**
 * @generated from message PerceptionLogProto
 */
export class PerceptionLogProto extends Message<PerceptionLogProto> {
  /**
   * @generated from field: int32 time = 1;
   */
  time = 0;

  /**
   * @generated from field: int32 entityID = 2;
   */
  entityID = 0;

  /**
   * @generated from field: ChangeSetProto visible = 3;
   */
  visible?: ChangeSetProto;

  /**
   * @generated from field: repeated MessageProto communications = 4;
   */
  communications: MessageProto[] = [];

  constructor(data?: PartialMessage<PerceptionLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "PerceptionLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "entityID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "visible", kind: "message", T: ChangeSetProto },
    { no: 4, name: "communications", kind: "message", T: MessageProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerceptionLogProto {
    return new PerceptionLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerceptionLogProto {
    return new PerceptionLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerceptionLogProto {
    return new PerceptionLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: PerceptionLogProto | PlainMessage<PerceptionLogProto> | undefined, b: PerceptionLogProto | PlainMessage<PerceptionLogProto> | undefined): boolean {
    return proto3.util.equals(PerceptionLogProto, a, b);
  }
}

/**
 * @generated from message ConfigLogProto
 */
export class ConfigLogProto extends Message<ConfigLogProto> {
  /**
   * @generated from field: ConfigProto config = 1;
   */
  config?: ConfigProto;

  constructor(data?: PartialMessage<ConfigLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ConfigLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: ConfigProto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigLogProto {
    return new ConfigLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigLogProto {
    return new ConfigLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigLogProto {
    return new ConfigLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigLogProto | PlainMessage<ConfigLogProto> | undefined, b: ConfigLogProto | PlainMessage<ConfigLogProto> | undefined): boolean {
    return proto3.util.equals(ConfigLogProto, a, b);
  }
}

/**
 * @generated from message UpdatesLogProto
 */
export class UpdatesLogProto extends Message<UpdatesLogProto> {
  /**
   * @generated from field: int32 time = 1;
   */
  time = 0;

  /**
   * @generated from field: ChangeSetProto changes = 2;
   */
  changes?: ChangeSetProto;

  constructor(data?: PartialMessage<UpdatesLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "UpdatesLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "changes", kind: "message", T: ChangeSetProto },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatesLogProto {
    return new UpdatesLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatesLogProto {
    return new UpdatesLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatesLogProto {
    return new UpdatesLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatesLogProto | PlainMessage<UpdatesLogProto> | undefined, b: UpdatesLogProto | PlainMessage<UpdatesLogProto> | undefined): boolean {
    return proto3.util.equals(UpdatesLogProto, a, b);
  }
}

/**
 * @generated from message EndLogProto
 */
export class EndLogProto extends Message<EndLogProto> {
  constructor(data?: PartialMessage<EndLogProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "EndLogProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndLogProto {
    return new EndLogProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndLogProto {
    return new EndLogProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndLogProto {
    return new EndLogProto().fromJsonString(jsonString, options);
  }

  static equals(a: EndLogProto | PlainMessage<EndLogProto> | undefined, b: EndLogProto | PlainMessage<EndLogProto> | undefined): boolean {
    return proto3.util.equals(EndLogProto, a, b);
  }
}

